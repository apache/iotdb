/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.iotdb.protocol.influxdb.rpc.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2022-01-28")
public class TSWritePointsReq implements org.apache.thrift.TBase<TSWritePointsReq, TSWritePointsReq._Fields>, java.io.Serializable, Cloneable, Comparable<TSWritePointsReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSWritePointsReq");

  private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RETENTION_POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("retentionPolicy", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("precision", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONSISTENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("consistency", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LINE_PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("lineProtocol", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSWritePointsReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSWritePointsReqTupleSchemeFactory();

  public long sessionId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String database; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String retentionPolicy; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String precision; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String consistency; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String lineProtocol; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_ID((short)1, "sessionId"),
    DATABASE((short)2, "database"),
    RETENTION_POLICY((short)3, "retentionPolicy"),
    PRECISION((short)4, "precision"),
    CONSISTENCY((short)5, "consistency"),
    LINE_PROTOCOL((short)6, "lineProtocol");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSION_ID
          return SESSION_ID;
        case 2: // DATABASE
          return DATABASE;
        case 3: // RETENTION_POLICY
          return RETENTION_POLICY;
        case 4: // PRECISION
          return PRECISION;
        case 5: // CONSISTENCY
          return CONSISTENCY;
        case 6: // LINE_PROTOCOL
          return LINE_PROTOCOL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SESSIONID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RETENTION_POLICY,_Fields.PRECISION,_Fields.CONSISTENCY,_Fields.LINE_PROTOCOL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETENTION_POLICY, new org.apache.thrift.meta_data.FieldMetaData("retentionPolicy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRECISION, new org.apache.thrift.meta_data.FieldMetaData("precision", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSISTENCY, new org.apache.thrift.meta_data.FieldMetaData("consistency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINE_PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("lineProtocol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSWritePointsReq.class, metaDataMap);
  }

  public TSWritePointsReq() {
  }

  public TSWritePointsReq(
    long sessionId,
    java.lang.String database)
  {
    this();
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    this.database = database;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSWritePointsReq(TSWritePointsReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sessionId = other.sessionId;
    if (other.isSetDatabase()) {
      this.database = other.database;
    }
    if (other.isSetRetentionPolicy()) {
      this.retentionPolicy = other.retentionPolicy;
    }
    if (other.isSetPrecision()) {
      this.precision = other.precision;
    }
    if (other.isSetConsistency()) {
      this.consistency = other.consistency;
    }
    if (other.isSetLineProtocol()) {
      this.lineProtocol = other.lineProtocol;
    }
  }

  public TSWritePointsReq deepCopy() {
    return new TSWritePointsReq(this);
  }

  @Override
  public void clear() {
    setSessionIdIsSet(false);
    this.sessionId = 0;
    this.database = null;
    this.retentionPolicy = null;
    this.precision = null;
    this.consistency = null;
    this.lineProtocol = null;
  }

  public long getSessionId() {
    return this.sessionId;
  }

  public TSWritePointsReq setSessionId(long sessionId) {
    this.sessionId = sessionId;
    setSessionIdIsSet(true);
    return this;
  }

  public void unsetSessionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
  }

  public void setSessionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDatabase() {
    return this.database;
  }

  public TSWritePointsReq setDatabase(@org.apache.thrift.annotation.Nullable java.lang.String database) {
    this.database = database;
    return this;
  }

  public void unsetDatabase() {
    this.database = null;
  }

  /** Returns true if field database is set (has been assigned a value) and false otherwise */
  public boolean isSetDatabase() {
    return this.database != null;
  }

  public void setDatabaseIsSet(boolean value) {
    if (!value) {
      this.database = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRetentionPolicy() {
    return this.retentionPolicy;
  }

  public TSWritePointsReq setRetentionPolicy(@org.apache.thrift.annotation.Nullable java.lang.String retentionPolicy) {
    this.retentionPolicy = retentionPolicy;
    return this;
  }

  public void unsetRetentionPolicy() {
    this.retentionPolicy = null;
  }

  /** Returns true if field retentionPolicy is set (has been assigned a value) and false otherwise */
  public boolean isSetRetentionPolicy() {
    return this.retentionPolicy != null;
  }

  public void setRetentionPolicyIsSet(boolean value) {
    if (!value) {
      this.retentionPolicy = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPrecision() {
    return this.precision;
  }

  public TSWritePointsReq setPrecision(@org.apache.thrift.annotation.Nullable java.lang.String precision) {
    this.precision = precision;
    return this;
  }

  public void unsetPrecision() {
    this.precision = null;
  }

  /** Returns true if field precision is set (has been assigned a value) and false otherwise */
  public boolean isSetPrecision() {
    return this.precision != null;
  }

  public void setPrecisionIsSet(boolean value) {
    if (!value) {
      this.precision = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getConsistency() {
    return this.consistency;
  }

  public TSWritePointsReq setConsistency(@org.apache.thrift.annotation.Nullable java.lang.String consistency) {
    this.consistency = consistency;
    return this;
  }

  public void unsetConsistency() {
    this.consistency = null;
  }

  /** Returns true if field consistency is set (has been assigned a value) and false otherwise */
  public boolean isSetConsistency() {
    return this.consistency != null;
  }

  public void setConsistencyIsSet(boolean value) {
    if (!value) {
      this.consistency = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLineProtocol() {
    return this.lineProtocol;
  }

  public TSWritePointsReq setLineProtocol(@org.apache.thrift.annotation.Nullable java.lang.String lineProtocol) {
    this.lineProtocol = lineProtocol;
    return this;
  }

  public void unsetLineProtocol() {
    this.lineProtocol = null;
  }

  /** Returns true if field lineProtocol is set (has been assigned a value) and false otherwise */
  public boolean isSetLineProtocol() {
    return this.lineProtocol != null;
  }

  public void setLineProtocolIsSet(boolean value) {
    if (!value) {
      this.lineProtocol = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SESSION_ID:
      if (value == null) {
        unsetSessionId();
      } else {
        setSessionId((java.lang.Long)value);
      }
      break;

    case DATABASE:
      if (value == null) {
        unsetDatabase();
      } else {
        setDatabase((java.lang.String)value);
      }
      break;

    case RETENTION_POLICY:
      if (value == null) {
        unsetRetentionPolicy();
      } else {
        setRetentionPolicy((java.lang.String)value);
      }
      break;

    case PRECISION:
      if (value == null) {
        unsetPrecision();
      } else {
        setPrecision((java.lang.String)value);
      }
      break;

    case CONSISTENCY:
      if (value == null) {
        unsetConsistency();
      } else {
        setConsistency((java.lang.String)value);
      }
      break;

    case LINE_PROTOCOL:
      if (value == null) {
        unsetLineProtocol();
      } else {
        setLineProtocol((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSION_ID:
      return getSessionId();

    case DATABASE:
      return getDatabase();

    case RETENTION_POLICY:
      return getRetentionPolicy();

    case PRECISION:
      return getPrecision();

    case CONSISTENCY:
      return getConsistency();

    case LINE_PROTOCOL:
      return getLineProtocol();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SESSION_ID:
      return isSetSessionId();
    case DATABASE:
      return isSetDatabase();
    case RETENTION_POLICY:
      return isSetRetentionPolicy();
    case PRECISION:
      return isSetPrecision();
    case CONSISTENCY:
      return isSetConsistency();
    case LINE_PROTOCOL:
      return isSetLineProtocol();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSWritePointsReq)
      return this.equals((TSWritePointsReq)that);
    return false;
  }

  public boolean equals(TSWritePointsReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sessionId = true;
    boolean that_present_sessionId = true;
    if (this_present_sessionId || that_present_sessionId) {
      if (!(this_present_sessionId && that_present_sessionId))
        return false;
      if (this.sessionId != that.sessionId)
        return false;
    }

    boolean this_present_database = true && this.isSetDatabase();
    boolean that_present_database = true && that.isSetDatabase();
    if (this_present_database || that_present_database) {
      if (!(this_present_database && that_present_database))
        return false;
      if (!this.database.equals(that.database))
        return false;
    }

    boolean this_present_retentionPolicy = true && this.isSetRetentionPolicy();
    boolean that_present_retentionPolicy = true && that.isSetRetentionPolicy();
    if (this_present_retentionPolicy || that_present_retentionPolicy) {
      if (!(this_present_retentionPolicy && that_present_retentionPolicy))
        return false;
      if (!this.retentionPolicy.equals(that.retentionPolicy))
        return false;
    }

    boolean this_present_precision = true && this.isSetPrecision();
    boolean that_present_precision = true && that.isSetPrecision();
    if (this_present_precision || that_present_precision) {
      if (!(this_present_precision && that_present_precision))
        return false;
      if (!this.precision.equals(that.precision))
        return false;
    }

    boolean this_present_consistency = true && this.isSetConsistency();
    boolean that_present_consistency = true && that.isSetConsistency();
    if (this_present_consistency || that_present_consistency) {
      if (!(this_present_consistency && that_present_consistency))
        return false;
      if (!this.consistency.equals(that.consistency))
        return false;
    }

    boolean this_present_lineProtocol = true && this.isSetLineProtocol();
    boolean that_present_lineProtocol = true && that.isSetLineProtocol();
    if (this_present_lineProtocol || that_present_lineProtocol) {
      if (!(this_present_lineProtocol && that_present_lineProtocol))
        return false;
      if (!this.lineProtocol.equals(that.lineProtocol))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sessionId);

    hashCode = hashCode * 8191 + ((isSetDatabase()) ? 131071 : 524287);
    if (isSetDatabase())
      hashCode = hashCode * 8191 + database.hashCode();

    hashCode = hashCode * 8191 + ((isSetRetentionPolicy()) ? 131071 : 524287);
    if (isSetRetentionPolicy())
      hashCode = hashCode * 8191 + retentionPolicy.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrecision()) ? 131071 : 524287);
    if (isSetPrecision())
      hashCode = hashCode * 8191 + precision.hashCode();

    hashCode = hashCode * 8191 + ((isSetConsistency()) ? 131071 : 524287);
    if (isSetConsistency())
      hashCode = hashCode * 8191 + consistency.hashCode();

    hashCode = hashCode * 8191 + ((isSetLineProtocol()) ? 131071 : 524287);
    if (isSetLineProtocol())
      hashCode = hashCode * 8191 + lineProtocol.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TSWritePointsReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSessionId(), other.isSetSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDatabase(), other.isSetDatabase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatabase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, other.database);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRetentionPolicy(), other.isSetRetentionPolicy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetentionPolicy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retentionPolicy, other.retentionPolicy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPrecision(), other.isSetPrecision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrecision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.precision, other.precision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConsistency(), other.isSetConsistency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsistency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consistency, other.consistency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLineProtocol(), other.isSetLineProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineProtocol, other.lineProtocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSWritePointsReq(");
    boolean first = true;

    sb.append("sessionId:");
    sb.append(this.sessionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("database:");
    if (this.database == null) {
      sb.append("null");
    } else {
      sb.append(this.database);
    }
    first = false;
    if (isSetRetentionPolicy()) {
      if (!first) sb.append(", ");
      sb.append("retentionPolicy:");
      if (this.retentionPolicy == null) {
        sb.append("null");
      } else {
        sb.append(this.retentionPolicy);
      }
      first = false;
    }
    if (isSetPrecision()) {
      if (!first) sb.append(", ");
      sb.append("precision:");
      if (this.precision == null) {
        sb.append("null");
      } else {
        sb.append(this.precision);
      }
      first = false;
    }
    if (isSetConsistency()) {
      if (!first) sb.append(", ");
      sb.append("consistency:");
      if (this.consistency == null) {
        sb.append("null");
      } else {
        sb.append(this.consistency);
      }
      first = false;
    }
    if (isSetLineProtocol()) {
      if (!first) sb.append(", ");
      sb.append("lineProtocol:");
      if (this.lineProtocol == null) {
        sb.append("null");
      } else {
        sb.append(this.lineProtocol);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'sessionId' because it's a primitive and you chose the non-beans generator.
    if (database == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'database' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSWritePointsReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSWritePointsReqStandardScheme getScheme() {
      return new TSWritePointsReqStandardScheme();
    }
  }

  private static class TSWritePointsReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSWritePointsReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSWritePointsReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sessionId = iprot.readI64();
              struct.setSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATABASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.database = iprot.readString();
              struct.setDatabaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RETENTION_POLICY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.retentionPolicy = iprot.readString();
              struct.setRetentionPolicyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRECISION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.precision = iprot.readString();
              struct.setPrecisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONSISTENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.consistency = iprot.readString();
              struct.setConsistencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LINE_PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lineProtocol = iprot.readString();
              struct.setLineProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSessionId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sessionId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSWritePointsReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeI64(struct.sessionId);
      oprot.writeFieldEnd();
      if (struct.database != null) {
        oprot.writeFieldBegin(DATABASE_FIELD_DESC);
        oprot.writeString(struct.database);
        oprot.writeFieldEnd();
      }
      if (struct.retentionPolicy != null) {
        if (struct.isSetRetentionPolicy()) {
          oprot.writeFieldBegin(RETENTION_POLICY_FIELD_DESC);
          oprot.writeString(struct.retentionPolicy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.precision != null) {
        if (struct.isSetPrecision()) {
          oprot.writeFieldBegin(PRECISION_FIELD_DESC);
          oprot.writeString(struct.precision);
          oprot.writeFieldEnd();
        }
      }
      if (struct.consistency != null) {
        if (struct.isSetConsistency()) {
          oprot.writeFieldBegin(CONSISTENCY_FIELD_DESC);
          oprot.writeString(struct.consistency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lineProtocol != null) {
        if (struct.isSetLineProtocol()) {
          oprot.writeFieldBegin(LINE_PROTOCOL_FIELD_DESC);
          oprot.writeString(struct.lineProtocol);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSWritePointsReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSWritePointsReqTupleScheme getScheme() {
      return new TSWritePointsReqTupleScheme();
    }
  }

  private static class TSWritePointsReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSWritePointsReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSWritePointsReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.sessionId);
      oprot.writeString(struct.database);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRetentionPolicy()) {
        optionals.set(0);
      }
      if (struct.isSetPrecision()) {
        optionals.set(1);
      }
      if (struct.isSetConsistency()) {
        optionals.set(2);
      }
      if (struct.isSetLineProtocol()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetRetentionPolicy()) {
        oprot.writeString(struct.retentionPolicy);
      }
      if (struct.isSetPrecision()) {
        oprot.writeString(struct.precision);
      }
      if (struct.isSetConsistency()) {
        oprot.writeString(struct.consistency);
      }
      if (struct.isSetLineProtocol()) {
        oprot.writeString(struct.lineProtocol);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSWritePointsReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sessionId = iprot.readI64();
      struct.setSessionIdIsSet(true);
      struct.database = iprot.readString();
      struct.setDatabaseIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.retentionPolicy = iprot.readString();
        struct.setRetentionPolicyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.precision = iprot.readString();
        struct.setPrecisionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.consistency = iprot.readString();
        struct.setConsistencyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lineProtocol = iprot.readString();
        struct.setLineProtocolIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

