/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.iotdb.pipe.api.event;

/**
 * {@link UserDefinedEvent} is used to wrap data generated by users, keeping a source {@link Event}
 * to automatically report the processing progress to pipe engine.
 */
public abstract class UserDefinedEvent implements Event {

  /** The {@link UserDefinedEvent} is generated from this source {@link Event}. */
  protected final Event sourceEvent;

  /**
   * @param sourceEvent The source {@link Event} of this {@link UserDefinedEvent} which is used to
   *     report the processing progress to pipe engine. Please notice that the source {@link Event}
   *     should satisfy the following conditions: 1. A source {@link Event} can only be assigned to
   *     one {@link UserDefinedEvent}. 2. If more than one {@link UserDefinedEvent} is generated
   *     from the same source {@link Event}, only the last generated {@link UserDefinedEvent} can be
   *     assigned with the source {@link Event}, others should be assigned {@code null}, or call
   *     {@link #UserDefinedEvent()} to generate a {@link UserDefinedEvent} without source {@link
   *     Event}.
   */
  protected UserDefinedEvent(Event sourceEvent) {
    this.sourceEvent = parseRootSourceEvent(sourceEvent);
  }

  /** Generate a {@link UserDefinedEvent} without source {@link Event}. */
  protected UserDefinedEvent() {
    this.sourceEvent = null;
  }

  private Event parseRootSourceEvent(Event sourceEvent) {
    return sourceEvent instanceof UserDefinedEvent
        ? ((UserDefinedEvent) sourceEvent).getSourceEvent()
        : sourceEvent;
  }

  public Event getSourceEvent() {
    return sourceEvent;
  }
}
