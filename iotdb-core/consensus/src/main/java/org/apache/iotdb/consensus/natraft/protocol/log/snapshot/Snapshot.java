/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.iotdb.consensus.natraft.protocol.log.snapshot;

import org.apache.iotdb.common.rpc.thrift.TSStatus;
import org.apache.iotdb.consensus.common.Peer;
import org.apache.iotdb.consensus.natraft.protocol.RaftMember;

import java.io.DataOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;

/**
 * As we can only hold a certain amount of logs in memory, when the logs' size exceed the memory
 * capacity, they will be deleted or compressed, and a snapshot of current system will be generated.
 * If a node need to catch up but its next log is deleted, it will catch up based on the latest
 * snapshot and the logs still in memory. The snapshot could be a file recording the list of current
 * system files, or the compressed all historical logs, depending on the implementation.
 */
public abstract class Snapshot {

  protected long lastLogIndex;
  protected long lastLogTerm;
  protected List<Peer> currNodes;

  public abstract ByteBuffer serialize();

  public abstract void deserialize(ByteBuffer buffer);

  public void setLastLogIndex(long lastLogIndex) {
    this.lastLogIndex = lastLogIndex;
  }

  public void setLastLogTerm(long lastLogTerm) {
    this.lastLogTerm = lastLogTerm;
  }

  public long getLastLogIndex() {
    return lastLogIndex;
  }

  public long getLastLogTerm() {
    return lastLogTerm;
  }

  public abstract TSStatus install(RaftMember member);

  /**
   * Discard contents which is generated by logs whose index <= 'minIndex' if possible. This method
   * is a best-effort one without guarantee that the result will absolutely not contain contents
   * before 'minIndex'.
   *
   * @param minIndex
   */
  public void truncateBefore(long minIndex) {}

  @Override
  public String toString() {
    return String.format("%d-%d", lastLogIndex, lastLogTerm);
  }

  public List<Peer> getCurrNodes() {
    return currNodes;
  }

  public void setCurrNodes(List<Peer> currNodes) {
    this.currNodes = currNodes;
  }

  protected void serializeBase(DataOutputStream dataOutputStream) {
    try {
      dataOutputStream.writeLong(lastLogIndex);
      dataOutputStream.writeLong(lastLogTerm);

      dataOutputStream.writeInt(currNodes.size());
      for (Peer currNode : currNodes) {
        currNode.serialize(dataOutputStream);
      }
    } catch (IOException e) {
      // unreachable
    }
  }

  protected void deserializeBase(ByteBuffer buffer) {
    lastLogIndex = buffer.getLong();
    lastLogTerm = buffer.getLong();

    int size = buffer.getInt();
    currNodes = new ArrayList<>(size);
    for (int i = 0; i < size; i++) {
      currNodes.add(Peer.deserialize(buffer));
    }
  }
}
