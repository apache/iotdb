/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.iotdb.confignode.consensus.request.write.pipe.payload;

import org.apache.iotdb.commons.pipe.extractor.IoTDBNonDataRegionExtractor;
import org.apache.iotdb.commons.pipe.pattern.IoTDBPipePattern;
import org.apache.iotdb.confignode.consensus.request.ConfigPhysicalPlan;
import org.apache.iotdb.confignode.consensus.request.ConfigPhysicalPlanType;
import org.apache.iotdb.confignode.consensus.request.write.database.SetTTLPlan;
import org.apache.iotdb.confignode.manager.pipe.event.PipeConfigRegionWritePlanEvent;
import org.apache.iotdb.confignode.manager.pipe.extractor.ConfigRegionListeningQueue;
import org.apache.iotdb.confignode.manager.pipe.receiver.protocol.IoTDBConfigNodeReceiver;

import org.apache.tsfile.utils.ReadWriteIOUtils;

import java.io.DataOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * This is a set of {@link SetTTLPlan}s generated by an {@link IoTDBPipePattern} and a normal {@link
 * SetTTLPlan}. This is used to persist the "at most one" match between {@link
 * PipeConfigRegionWritePlanEvent} in the {@link ConfigRegionListeningQueue} and the {@link
 * IoTDBNonDataRegionExtractor#supply()} and will be executed serially in {@link
 * IoTDBConfigNodeReceiver}
 */
public class PipeSetTTLPlan extends ConfigPhysicalPlan {
  private List<SetTTLPlan> planList;

  public PipeSetTTLPlan() {
    super(ConfigPhysicalPlanType.PipeSetTTL);
  }

  public PipeSetTTLPlan(final List<SetTTLPlan> planList) {
    super(ConfigPhysicalPlanType.PipeSetTTL);
    this.planList = planList;
  }

  public List<SetTTLPlan> getSetTTLPlans() {
    return planList;
  }

  @Override
  protected void serializeImpl(final DataOutputStream stream) throws IOException {
    stream.writeShort(getType().getPlanType());
    ReadWriteIOUtils.write(planList.size(), stream);
    for (final SetTTLPlan setTTLPlan : planList) {
      final ByteBuffer buffer = setTTLPlan.serializeToByteBuffer();
      stream.write(buffer.array(), 0, buffer.limit());
    }
  }

  @Override
  protected void deserializeImpl(final ByteBuffer buffer) throws IOException {
    final int size = ReadWriteIOUtils.readInt(buffer);
    planList = new ArrayList<>();
    for (int i = 0; i < size; ++i) {
      planList.add((SetTTLPlan) ConfigPhysicalPlan.Factory.create(buffer));
    }
  }

  @Override
  public boolean equals(final Object obj) {
    if (this == obj) {
      return true;
    }
    if (obj == null || getClass() != obj.getClass()) {
      return false;
    }
    final PipeSetTTLPlan that = (PipeSetTTLPlan) obj;
    return Objects.equals(planList, that.planList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(planList);
  }

  @Override
  public String toString() {
    return "PipeSetTTLPlan{" + "planList='" + planList + "'}";
  }
}
